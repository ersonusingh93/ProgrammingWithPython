Mysql : Relational Database Management system : 
 
DDL : Data Definition language : create , alter, drop, truncate
DML : Data Manipulation Language : insert, update, delete, call, explain, lock
DCL : Data Control Language : grant, revoke
TCL : Transaction Control Language : Commit, Rollback, save point, set transaction, constriants
DQL : Data Query Language : select

Constraints : 
Primary Key - single
Forein Key
Not null
default
check
unique - multiple column


mapping :
one to one
one to many
many to many

joins 
inner
left outer join
right outer join
full join
cross joins

length
instr(str, "")
substr(str, index, length)

RelationShip : 
One to one
one to many
many to many


Relational Database Management System : 
Postgre SQL
MySQL - innodb
Oracle
Sql Server
IBM DB2

SQL - Structured Query Language


No SQL : 
Non Relational Database management system : 
Mongodb : 


Triggers : Store procedure technique

Store Procedure : 
A stored procedure is a set of Structured Query Language (SQL) statements with an assigned name, which are stored in a relational database management system (RDBMS) as a group, so it can be reused and shared by multiple programs.

Trigger : 
insert : before insert, after insert
update : before update, after update
delete : 

Drop - it will permanently delete the schema or database - it can't be recovered

Truncate - it will truncate the schema : it will delete the tuples present in schema - but structure of schema
will remains same

aggregate function : 
sum
max
min
avg
std
count

Triggers : 
A trigger is a named database object that is associated with a table, and that activates when a particular event occurs for the table. Some uses for triggers are to perform checks of values to be inserted into a table or to perform calculations on values involved in an update.

insert - before, after
update - before, after
delete - before, after

DDL : create, alter, drop, truncate
DML : insert, update, delete


A - Atomicity
C - Consistency
I - Isolation
D - Durability

drop trigger triggername;

delimiter //
CREATE TRIGGER upd_check BEFORE UPDATE ON account
       FOR EACH ROW
       BEGIN
           IF NEW.amount < 0 THEN
               SET NEW.amount = 0;
           ELSEIF NEW.amount > 100 THEN
               SET NEW.amount = 100;
           END IF;
       END;//
delimiter ;


insert : before, after
update : before, after
delete : before, after
