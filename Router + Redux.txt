React Router : 

react-router: Core package for React routing.
react-router-dom: For web applications.
react-router-native: For React Native apps.


<Link> Component & Navigation : 

<Link> is used instead of <a> to enable navigation without reloading.


<Switch> & Redirects : 

<Switch> (deprecated in React Router v6) is replaced with <Routes>.
Redirecting in React Router v6:


Install dependencies: npm install react-router-dom

<NavLink> Adding a navigation bar
Let us now create a standard Navigation bar component that can be used to navigate inside our application.

Nested Routing in React : 

Nested routing allows you to define child routes inside a parent route. This is useful for dashboards, user profiles, or sections of a page that need their own navigation.

import { NavLink } from "react-router-dom";

const NavBar = () => {
  return (
    <nav>
      <ul>
        <li>
          <NavLink to="/">Home</NavLink>
        </li>
        <li>
          <NavLink to="/about">About</NavLink>
        </li>
        <li>
          <NavLink to="/products">Products</NavLink>
        </li>
      </ul>
    </nav>
  );
};

export default NavBar;




import React from "react";
import { BrowserRouter as Router, Routes, Route, Link, NavLink, Navigate } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const About = () => <h2>About Page</h2>;
const NotFound = () => <h2>404 - Page Not Found</h2>;

const Dashboard = () => (
  <div>
    <h2>Dashboard</h2>
    <nav>
      <Link to="profile">Profile</Link> | <Link to="settings">Settings</Link>
    </nav>
    <Routes>
      <Route path="profile" element={<h3>Profile Page</h3>} />
      <Route path="settings" element={<h3>Settings Page</h3>} />
    </Routes>
  </div>
);

const User = ({ id }) => <h2>User Profile for ID: {id}</h2>;
const ProtectedRoute = ({ children }) => {
  const isAuthenticated = false; // Change to true to allow access
  return isAuthenticated ? children : <Navigate to="/" />;
};

function App() {
  return (
    <Router>
      <nav>
        <NavLink to="/" end>Home</NavLink> | 
        <NavLink to="/about">About</NavLink> | 
        <NavLink to="/dashboard">Dashboard</NavLink> | 
        <NavLink to="/user/123">User Profile</NavLink>
      </nav>
      
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/dashboard/*" element={<Dashboard />} />
        <Route path="/user/:id" element={<User />} />
        <Route path="/protected" element={<ProtectedRoute><h2>Protected Page</h2></ProtectedRoute>} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}

export default App;



Redux  Basics and Principals : 

Redux is a state management library that stores the application state in a central location, making it easier to access and modify.

Core Concepts of Redux:

Store â†’ Holds the global state.
All components access the state from this store.


Actions â†’ Describes what should change.


Reducers â†’ Defines how the state should change.


npm install redux react-redux

State Storage Problem in Redux

Props Drilling : 

Middleware : 

In Redux, middleware is a function that extends Redux's dispatch function. It lets you perform actions like logging, making API calls, and modifying actions. Middleware is composable, meaning you can combine multiple middlewares together. 

Managing state in large applications can be challenging. Let's explore why state storage is a problem and how Redux solves it.



Dispatch : 

dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.

The dispatch() function is used to dispatch action types invoked from an event handler, such as on an onClick event. dispatch() typically takes a type prop in an argument object passed to it. More details later in this section.


Actions An action is a plain JavaScript object that has a type field. You can think of an action as an event that describes something that happened in the application.

BrowseRouter : 

Routes : 

Route : 

function App() {
  return (
    <BrowserRouter basename="/app">
      <Routes>
        <Route path="/" /> {/* ðŸ‘ˆ Renders at /app/ */}
      </Routes>
    </BrowserRouter>
  );
}
